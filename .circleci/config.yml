version: 2.1

orbs:
  python: circleci/python@2.1.1

executors:
  app-executor:
    docker:
      - image: cimg/python:3.11
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS

parameters:
  app_dir:
    type: string
    default: ch04-bookstore

aliases:
  - &python-executor
      name: python/default
      tag: "3.11"

fast-checkout: &fast-checkout
  attach_workspace:
    at: /tmp/workspace

jobs:
  requirements:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root"
          pkg-manager: poetry
      - run:
          command: |
            # $HOME = /home/circleci
            # pwd = /home/circleci/project
            echo $HOME
            pwd
            poetry check
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project

  lint:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root --only dev"
          pkg-manager: poetry
      - run: &git-diff-py-files
          name: List added, copied, modified, and renamed *py files
          command: |
            git diff --name-only --diff-filter=ACMR origin/main | grep -E "(.py$)" > diff.txt || true
      - run:
          name: Ruff linting
          command: |
            poetry run ruff check --config=pyproject.toml . &> lint_checks.txt || true
            cat lint_checks.txt
      - run:
          name: Diff-based ruff
          command: &display-lint-errors |
            grep -Ff diff.txt lint_checks.txt > lint_errors.txt || true
            if [ -s lint_errors.txt ]; then
              cat lint_errors.txt
              printf 'Run the following command to fix your branch:\n make fixes'
              exit 1
            fi

  format:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root --only dev"
          pkg-manager: poetry
      - run: *git-diff-py-files
      - run:
          name: Black code formatting
          command: |
            poetry run black --check --diff --color --config=pyproject.toml . &> lint_checks.txt || true
            cat lint_checks.txt
      - run:
          name: Diff-based black
          command: *display-lint-errors

  test:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root --only test"
          pkg-manager: poetry
      - run:
          command: |
            poetry run pytest << pipeline.parameters.app_dir >>
      - store_test_results:
          path: .

  persist-checkout:
    executor: app-executor
    steps:
      - checkout
      - run:
          command: |
            echo "IMAGE_TAG=$(echo `git log -n1 --format="%h"`)" >> $HOME/env
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
            - env

#   build:
#     executor: app-executor
#     steps:
#       - checkout
#       - *install-dependencies
#       - run:
#           name: Build
#           command: |
#             python -V

workflows:
  ci:
    jobs:
      - requirements:
          name: Validate requirements
          filters: &ci-filter
            branches:
              ignore: main

      - lint:
          name: Ruff linting
          filters: *ci-filter
          requires:
            - Validate requirements

      - format:
          name: Black formatting
          filters: *ci-filter
          requires:
            - Validate requirements

      - test:
          name: Unit testing
          filters: *ci-filter
          requires:
            - Ruff linting
            - Black formatting

      - persist-checkout

#   build:
#     jobs:
#       - build
#       - approval:
#           type: approval
#           requires:
#             - build

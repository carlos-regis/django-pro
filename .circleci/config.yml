version: 2.1

orbs:
  python: circleci/python@2.1.1

executors:
  app-executor:
    parameters:
      app-name:
        type: string
        default: bookstore
      workspace-dir:
        type: string
        default: /tmp/workspace
      docker-compose-file:
        type: string
        default: compose.yaml
      app-dir:
        type: string
        default: "ch04-bookstore"
    environment:
      WORKSPACE_DIR: << parameters.workspace-dir >>
      APP_NAME: << parameters.app-name >>
      APP_DIR: << parameters.app-dir >>
      DOCKER_COMPOSE_FILE: << parameters.docker-compose-file >>
    docker:
      - image: cimg/python:3.11
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS

aliases:
  - &python-executor
      name: python/default
      tag: "3.11"

fast-checkout: &fast-checkout
  attach_workspace:
    at: /tmp/workspace/

jobs:
  requirements:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root"
          pkg-manager: poetry
      - run:
          command: |
            # $HOME = /home/circleci
            # pwd = /home/circleci/project
            echo $HOME
            pwd
            poetry check
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project

  lint:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root --only dev"
          pkg-manager: poetry
      - run: &git-diff-py-files
          name: List added, copied, modified, and renamed *py files
          command: |
            git diff --name-only --diff-filter=ACMR origin/main | grep -E "(.py$)" > diff.txt || true
      - run:
          name: Ruff linting
          command: |
            poetry run ruff check --config=pyproject.toml . &> lint_checks.txt || true
      - run:
          name: Diff-based ruff
          command: &display-lint-errors |
            grep -Ff diff.txt lint_checks.txt > lint_errors.txt || true
            if [ -s lint_errors.txt ]; then
              cat lint_errors.txt
              printf 'Run the following command to fix your branch: make fixes'
              exit 1
            fi

  format:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root --only dev"
          pkg-manager: poetry
      - run: *git-diff-py-files
      - run:
          name: Black code formatting
          command: |
            poetry run black --check --diff --color --config=pyproject.toml . &> lint_checks.txt || true
      - run:
          name: Diff-based black
          command: *display-lint-errors

  persist-checkout:
    executor: app-executor
    steps:
      - checkout
      - run:
          command: |
            echo "IMAGE_TAG=$(echo `git log -n1 --format="%h"`)" >> $HOME/env
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
            - env

  test:
    executor: app-executor

    parallelism: 2

    environment:
      TEST_RESULTS: /tmp/test-results

    steps:
      - *fast-checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: $WORKSPACE_DIR
      - run:
          name: Unit tests
          command: |
            mkdir -p $TEST_RESULTS
            cd $WORKSPACE_DIR/project/$APP_DIR && pwd && ls -la
            ls -la /app
            echo "*** Waiting for services to start..."
            DJANGO_APP_NAME=$APP_NAME docker compose up -d
            echo "*** Running tests with docker compose exec, poetry, and django unittest..."
            docker-compose -f $DOCKER_COMPOSE_FILE exec web poetry run python manage.py test
            echo "*** Running tests with docker compose run and pytest..."
            docker compose -f $DOCKER_COMPOSE_FILE run --rm web pytest ch04-bookstore
            echo "*** Running tests with docker compose exec, poetry, and pytest..."
            docker compose -f $DOCKER_COMPOSE_FILE exec web poetry run pytest
            echo "*** Running tests with docker compose run and manage.py test..."
            docker compose -f $DOCKER_COMPOSE_FILE run --rm web manage.py test
            echo "*** Running tests with EXEC..."
            docker compose -f $DOCKER_COMPOSE_FILE down
      - store_artifacts:
          path: $TEST_RESULTS
          destination: raw-test-output
      - store_test_results:
          path: $TEST_RESULTS

  build:
    executor: app-executor
    steps:
      - *fast-checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Django image
          command: |
            set -ex
            cd $WORKSPACE_DIR/project
            source $WORKSPACE_DIR/env
            docker build -t $DOCKER_USER/$APP_NAME:$IMAGE_TAG .
            mkdir -p $WORKSPACE_DIR/image
            docker save -o $WORKSPACE_DIR/image/$APP_NAME.tar $DOCKER_USER/$APP_NAME:$IMAGE_TAG
      - persist_to_workspace:
          root: $WORKSPACE_DIR
          paths:
            - image/$APP_NAME.tar


  push:
    executor: app-executor
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: $WORKSPACE_DIR
      - run:
          name: Push django image
          command: |
            source $WORKSPACE_DIR/env
            docker load -i $WORKSPACE_DIR/image/$APP_NAME.tar
            echo "$DOCKER_PASS" | docker login -u $DOCKER_USER --password-stdin
            docker push $DOCKER_USER/$APP_NAME:$IMAGE_TAG

workflows:
  ci:
    jobs:
      - requirements:
          name: Validate requirements
          filters: &ci-filter
            branches:
              ignore: main

      - lint:
          name: Ruff linting
          filters: *ci-filter

      - format:
          name: Black formatting
          filters: *ci-filter

      - test:
          name: Unit testing
          requires:
            - Validate requirements

      - persist-checkout:
          requires:
            - Unit testing

      - build:
          context:
            - Django-Pro
          requires:
            - persist-checkout

      # - approval:
      #     type: approval
      #     requires:
      #       - build

      - push:
          context:
            - Django-Pro
          requires:
            - build

version: 2.1

orbs:
  python: circleci/python@2.1.1

executors:
  app-executor:
    docker:
      - image: cimg/python:3.11
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS

parameters:
  app_dir:
    type: string
    default: ch04-bookstore
  app_name:
    type: string
    default: django-pro
  workspace_dir:
    type: string
    default: /tmp/workspace

aliases:
  - &python-executor
      name: python/default
      tag: "3.11"

fast-checkout: &fast-checkout
  attach_workspace:
    at: << pipeline.parameters.workspace_dir >>

jobs:
  requirements:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root"
          pkg-manager: poetry
      - run:
          command: |
            # $HOME = /home/circleci
            # pwd = /home/circleci/project
            echo $HOME
            pwd
            poetry check
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project

  lint:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root --only dev"
          pkg-manager: poetry
      - run: &git-diff-py-files
          name: List added, copied, modified, and renamed *py files
          command: |
            git diff --name-only --diff-filter=ACMR origin/main | grep -E "(.py$)" > diff.txt || true
      - run:
          name: Ruff linting
          command: |
            poetry run ruff check --config=pyproject.toml . &> lint_checks.txt || true
      - run:
          name: Diff-based ruff
          command: &display-lint-errors |
            grep -Ff diff.txt lint_checks.txt > lint_errors.txt || true
            if [ -s lint_errors.txt ]; then
              cat lint_errors.txt
              printf 'Run the following command to fix your branch:\n make fixes'
              exit 1
            fi

  format:
    executor: *python-executor
    steps:
      - checkout
      - python/install-packages:
          args: "--no-interaction --no-root --only dev"
          pkg-manager: poetry
      - run: *git-diff-py-files
      - run:
          name: Black code formatting
          command: |
            poetry run black --check --diff --color --config=pyproject.toml . &> lint_checks.txt || true
      - run:
          name: Diff-based black
          command: *display-lint-errors

  # test:
  #   executor: *python-executor
  #   steps:
  #     - checkout
  #     - python/install-packages:
  #         args: "--no-interaction --no-root --only test"
  #         pkg-manager: poetry
  #     - run:
  #         command: |
  #           docker-composer exec web poetry run pytest << pipeline.parameters.app_dir >>
  #     - store_test_results:
  #         path: .

  persist-checkout:
    executor: app-executor
    steps:
      - checkout
      - run:
          command: |
            echo "IMAGE_TAG=$(echo `git log -n1 --format="%h"`)" >> $HOME/env
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
            - env

  build:
    executor: app-executor
    steps:
      - *fast-checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Django image
          command: |
            set -ex
            cd << pipeline.parameters.workspace_dir >>/project
            source << pipeline.parameters.workspace_dir >>/env
            docker build -t $DOCKER_USER/<< pipeline.parameters.app_name >>:$IMAGE_TAG .
            mkdir -p << pipeline.parameters.workspace_dir >>/image
            docker save -o << pipeline.parameters.workspace_dir >>/image/<< pipeline.parameters.app_name >>.tar $DOCKER_USER/<< pipeline.parameters.app_name >>:$IMAGE_TAG
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_dir >>
          paths:
            - image/<< pipeline.parameters.app_name >>.tar

  test:
    executor: app-executor

    parallelism: 2

    environment:
      TEST_RESULTS: << pipeline.parameters.workspace_dir >>/test-results

    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: << pipeline.parameters.workspace_dir >>
      - run:
          name: Unit tests
          command: |
            # source << pipeline.parameters.workspace_dir >>/env
            # docker load -i << pipeline.parameters.workspace_dir >>/image/<< pipeline.parameters.app_name >>.tar
            echo "Running tests..."
            pwd
            ls -la $HOME/project
            ls -la << pipeline.parameters.workspace_dir >>/image
            mkdir -p ${TEST_RESULTS}
            echo "Waiting for services to start..."
            docker-compose -f << pipeline.parameters.workspace_dir >>/project/compose.yaml up -d
            # docker-compose run --rm django pytest
            docker-compose exec web poetry run pytest << pipeline.parameters.app_dir >>
      # - store_artifacts: # upload test summary for display in Artifacts
      #     path: $TEST_RESULTS
      #     destination: raw-test-output
      # - store_test_results:
      #     path: $TEST_RESULTS

  push:
    executor: app-executor
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: << pipeline.parameters.workspace_dir >>
      - run:
          name: Push django image
          command: |
            source << pipeline.parameters.workspace_dir >>/env
            docker load -i << pipeline.parameters.workspace_dir >>/image/<< pipeline.parameters.app_name >>.tar
            echo "$DOCKER_PASS" | docker login -u $DOCKER_USER --password-stdin
            docker push $DOCKER_USER/<< pipeline.parameters.app_name >>:$IMAGE_TAG

workflows:
  ci:
    jobs:
      - requirements:
          name: Validate requirements
          filters: &ci-filter
            branches:
              ignore: main

      - lint:
          name: Ruff linting
          filters: *ci-filter
          requires:
            - Validate requirements

      - format:
          name: Black formatting
          filters: *ci-filter
          requires:
            - Validate requirements

      # - test:
      #     name: Unit testing
      #     filters: *ci-filter
      #     requires:
      #       - Ruff linting
      #       - Black formatting

      - persist-checkout:
          requires:
            - Ruff linting
            - Black formatting

      - build:
          context:
            - Common Env
          requires:
            - persist-checkout

      - test:
          requires:
            - build

      # - approval:
      #     type: approval
      #     requires:
      #       - build

      - push:
          context:
            - Common Env
          requires:
            - test
